(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{718:function(a,t,s){"use strict";s.r(t);var v=s(98),_=Object(v.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"前端js规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前端js规范"}},[a._v("#")]),a._v(" 前端JS规范")]),a._v(" "),s("h3",{attrs:{id:"缩进"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缩进"}},[a._v("#")]),a._v(" 缩进")]),a._v(" "),s("ul",[s("li",[a._v("使用Tab (4个空格)")])]),a._v(" "),s("h3",{attrs:{id:"单行长度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单行长度"}},[a._v("#")]),a._v(" 单行长度")]),a._v(" "),s("ul",[s("li",[a._v("不要超过80，但如果编辑器开启word wrap可以不考虑单行长度")])]),a._v(" "),s("h3",{attrs:{id:"分号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分号"}},[a._v("#")]),a._v(" 分号")]),a._v(" "),s("p",[a._v("以下几种情况后需加分号：")]),a._v(" "),s("ul",[s("li",[a._v("变量声明")]),a._v(" "),s("li",[a._v("表达式")]),a._v(" "),s("li",[a._v("return")]),a._v(" "),s("li",[a._v("throw")]),a._v(" "),s("li",[a._v("break")]),a._v(" "),s("li",[a._v("continue")]),a._v(" "),s("li",[a._v("do-while")])]),a._v(" "),s("h3",{attrs:{id:"空格"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#空格"}},[a._v("#")]),a._v(" 空格")]),a._v(" "),s("h3",{attrs:{id:"单行注释"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单行注释"}},[a._v("#")]),a._v(" 单行注释")]),a._v(" "),s("ul",[s("li",[a._v("双斜线后，必须跟一个空格；")]),a._v(" "),s("li",[a._v("缩进与下一行代码保持一致；")]),a._v(" "),s("li",[a._v("可位于一个代码行的末尾，与代码间隔一个空格。")])]),a._v(" "),s("h3",{attrs:{id:"多行注释"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多行注释"}},[a._v("#")]),a._v(" 多行注释")]),a._v(" "),s("p",[a._v("最少三行, '*'后跟一个空格，具体参照右边的写法；")]),a._v(" "),s("p",[a._v("建议在以下情况下使用：")]),a._v(" "),s("ul",[s("li",[a._v("难于理解的代码段")]),a._v(" "),s("li",[a._v("可能存在错误的代码段")]),a._v(" "),s("li",[a._v("浏览器特殊的HACK代码")]),a._v(" "),s("li",[a._v("业务逻辑强相关的代码")])]),a._v(" "),s("h3",{attrs:{id:"文档注释"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#文档注释"}},[a._v("#")]),a._v(" 文档注释")]),a._v(" "),s("p",[a._v("各类标签@param, @method等请参考usejsdoc和JSDoc Guide；")]),a._v(" "),s("p",[a._v("建议在以下情况下使用：")]),a._v(" "),s("ul",[s("li",[a._v("所有常量")]),a._v(" "),s("li",[a._v("所有函数")]),a._v(" "),s("li",[a._v("所有类")])]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n * @func\n * @desc 一个带参数的函数\n * @param {string} a - 参数a\n * @param {number} b=1 - 参数b默认值为1\n * @param {string} c=1 - 参数c有两种支持的取值</br>1—表示x</br>2—表示xx\n * @param {object} d - 参数d为一个对象\n * @param {string} d.e - 参数d的e属性\n * @param {string} d.f - 参数d的f属性\n * @param {object[]} g - 参数g为一个对象数组\n * @param {string} g.h - 参数g数组中一项的h属性\n * @param {string} g.i - 参数g数组中一项的i属性\n * @param {string} [j] - 参数j是一个可选参数\n */")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" g"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" j")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("...")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("h3",{attrs:{id:"引号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引号"}},[a._v("#")]),a._v(" 引号")]),a._v(" "),s("ul",[s("li",[a._v("最外层统一使用单引号。")])]),a._v(" "),s("h3",{attrs:{id:"变量命名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量命名"}},[a._v("#")]),a._v(" 变量命名")]),a._v(" "),s("ul",[s("li",[a._v("标准变量采用驼峰式命名")]),a._v(" "),s("li",[a._v("常量全大写，用下划线连接")]),a._v(" "),s("li",[a._v("构造函数，Class 大写第一个字母")])]),a._v(" "),s("h3",{attrs:{id:"变量声明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量声明"}},[a._v("#")]),a._v(" 变量声明")]),a._v(" "),s("p",[a._v("一个函数作用域中所有的变量声明尽量提到函数首部，用一个let声明。")]),a._v(" "),s("h3",{attrs:{id:"null"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#null"}},[a._v("#")]),a._v(" null")]),a._v(" "),s("p",[a._v("适用场景：")]),a._v(" "),s("ul",[s("li",[a._v("初始化一个将来可能被赋值为对象的变量")]),a._v(" "),s("li",[a._v("与已经初始化的变量做比较")]),a._v(" "),s("li",[a._v("作为一个参数为对象的函数的调用传参")]),a._v(" "),s("li",[a._v("作为一个返回对象的函数的返回值")])]),a._v(" "),s("p",[a._v("不适用场景：")]),a._v(" "),s("ul",[s("li",[a._v("不要用null来判断函数调用时有无传参")]),a._v(" "),s("li",[a._v("不要与未初始化的变量做比较")])]),a._v(" "),s("h3",{attrs:{id:"undefined"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#undefined"}},[a._v("#")]),a._v(" undefined")]),a._v(" "),s("ul",[s("li",[a._v("永远不要直接使用undefined进行变量判断；")]),a._v(" "),s("li",[a._v("使用typeof和字符串'undefined'对变量进行判断。")])])])}),[],!1,null,null,null);t.default=_.exports}}]);